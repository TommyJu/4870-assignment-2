@page "/edit-article/{articleId:int}"
@rendermode InteractiveServer

@inject NavigationManager navigationManager
@inject ArticleService articleService

<h1>Edit Article</h1>

@if (isLoading)
{
    <div class="text-center">
        <p>Loading article...</p>
    </div>
}
else if (Model == null)
{
    <p>Article not found.</p>
}
else
{
    <form method="post" @onsubmit="UpdateArticle" style="
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 40px;">
            
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <input id="title" class="form-control" @bind="@Title" />
            <span class="text-danger"></span>

            <textarea id="body" class="form-control" rows="10" @bind="@Body"></textarea>
            <span class="text-danger"></span>

        <div style="display: flex; gap: 12px;">
            <input type="submit" value="Save Changes" class="btn btn-primary" disabled="@isLoading"/>
            <div>
                <a href="/" class="btn btn-secondary">Back to List</a>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="text-danger">@errorMessage</div>
        }
    </form>
}


@code {
    [Parameter]
    public int articleId { get; set; }
    private Article? Model { get; set; }
    private bool isLoading = true;
    private string errorMessage = "";

    private string Title { get; set; } = "";
    private string Body { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Model = await articleService.GetArticleByIdAsync(articleId);
            if (Model is not null)
            {
                // Set local values instead of directly binding to Model
                Title = Model.Title?.ToString() ?? string.Empty;
                Body = Model.Body?.ToString() ?? string.Empty;
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching article: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdateArticle()
    {
        if (string.IsNullOrWhiteSpace(Title) || string.IsNullOrWhiteSpace(Body))
        {

            errorMessage = "Failed to update the article. Please check the input and try again.";

        }
        else
        {
            // Only update the Model when submitting
            if (Model != null)
            {
                Model.Title = Title;
                Model.Body = Body;
                var updatedArticle = await articleService.UpdateArticleAsync(Model);
                navigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Failed to update the article. Article data is missing.";
            }

            navigationManager.NavigateTo("/");
        }
    }
}
