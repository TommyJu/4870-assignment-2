@page "/"

@using BloggerBlazorServer.Services
@using Microsoft.AspNetCore.Components.QuickGrid
@inject ArticleService articleService

<PageTitle>Home</PageTitle>

<link rel="stylesheet" href="style.css" asp-append-version="true" />

<div class="text-center">
    <h1 class="display-4">Welcome</h1>

    <div style="margin-top: 40px;">
        <h1>Recent Articles</h1>

        @if (articles is null)
        {
            <p>Loading articles...</p>
        }
        else if (!articles.Any())
        {
            <p>No articles found.</p>
        }
        else
        {
            <QuickGrid Items="@articles.AsQueryable()" TGridItem="Article" class="table" Pagination="@pagination">
                <PropertyColumn Property="@(_ => _.Title)" />
                <PropertyColumn Property="@(_ => _.Contributor!.FirstName)" Title="First Name" />
                <PropertyColumn Property="@(_ => _.Contributor!.LastName)" Title="Last Name" />
                <PropertyColumn Property="@(_ => _.CreateDate)" Format="d" Title="Create Date" />
                <PropertyColumn Property="@(_ => _.EndDate)" Format="d" Title="End Date" />
                <TemplateColumn Title="Content">

                    <p>
                        @(context.Body != null && context.Body.Length > 100 ? context.Body.Substring(0, 100) + "..." :
                                            context.Body ?? string.Empty)
                    @if (context.Body != null && context.Body.Length > 100)
                        {
                            <a href="/readmore/@context.ArticleId" class="more-link">Read more</a>
                        }
                    </p>
                </TemplateColumn>
            </QuickGrid>
            <Paginator State="@pagination" />
        }
    </div>
</div>

@code {
    List<Article>? articles;
    
    protected override async Task OnInitializedAsync()
    {
        articles = await articleService.GetArticlesAsync();
        Console.WriteLine(articles);

        // Filter articles by date range (only show most recent articles)
        if (articles != null)
        {
            DateTime currentUtcDate = DateTime.UtcNow;

            articles = articles.Where(a => currentUtcDate >= a.StartDate && currentUtcDate < a.EndDate).ToList();
        }
    }

    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
}