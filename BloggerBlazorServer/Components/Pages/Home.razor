@page "/"
@using BloggerBlazorServer.Services
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@rendermode InteractiveServer

@inject ArticleService articleService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<PageTitle>Home</PageTitle>

<link rel="stylesheet" href="style.css" asp-append-version="true" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">


<div class="text-center">

    <div style="margin-top: 40px;">
        <h1 class="display-4">Recent Articles</h1>

        <p>
            <input type="text" @bind="searchString" @bind:event="oninput" placeholder="Search by article title"/>
        </p>

        @if (articles is null)
        {
            <p>Loading articles...</p>
        }
        else if (!articles.Any())
        {
            <p>No articles found.</p>
        }
        else
        {
            <QuickGrid Items="@filteredArticles" TGridItem="Article" class="table" Pagination="@pagination">
                <PropertyColumn Property="@(_ => _.Title)" />
                <PropertyColumn Property="@(_ => _.Contributor!.FirstName)" Title="First Name" />
                <PropertyColumn Property="@(_ => _.Contributor!.LastName)" Title="Last Name" />
                <PropertyColumn Property="@(_ => _.CreateDate)" Format="d" Title="Create Date" />
                <PropertyColumn Property="@(_ => _.EndDate)" Format="d" Title="End Date" />
                <TemplateColumn Title="Content">

                    <p>
                        @(context.Body != null && context.Body.Length > 100 ? context.Body.Substring(0, 100) + "..." :
                                            context.Body ?? string.Empty)
                    @if (context.Body != null && context.Body.Length > 100)
                        {
                            <a href="/readmore/@context.ArticleId" class="more-link">Read more</a>
                        }
                    </p>
                </TemplateColumn>

                <TemplateColumn>
                        @if((isContributor && userId == context.ContributorId) || isAdmin) {
                    <button class="btn btn-primary btn-sm margin-2" @onclick="() => EditArticle(context.ArticleId)">
            <i class="fa fa-edit"></i>
        </button>
                    <button class="btn btn-danger btn-sm margin-2" @onclick="() => DeleteArticle(context.ArticleId)">
            <i class="fa fa-trash"></i> <!-- Delete Icon -->
        </button>
                    }
                </TemplateColumn>
            </QuickGrid>
            <Paginator State="@pagination" />
        }
    </div>
</div>

@code {
    IQueryable<Article>? articles;

    private string searchString = "";

    IQueryable<Article> filteredArticles
        {
            get {
                var result = articles?.Where(a => a.Title!.Contains(searchString, StringComparison.OrdinalIgnoreCase));
                return result!;
                }
        }

    private string userId;
    private bool isAdmin;
    private bool isContributor;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity!.IsAuthenticated) {
          userId = user.FindFirst(ClaimTypes.NameIdentifier)!.Value;  
          isAdmin = user.IsInRole("Admin");
          isContributor = user.IsInRole("Contributor");
        }

        articles = (await articleService.GetArticlesAsync()).AsQueryable();
        

        // Filter articles by date range (only show most recent articles)
        if (articles != null)
        {
            DateTime currentUtcDate = DateTime.UtcNow;

            articles = articles.Where(a => currentUtcDate >= a.StartDate && currentUtcDate < a.EndDate).AsQueryable();
        }
    }

    private void EditArticle(int articleId)
    {
        navigationManager.NavigateTo($"/edit-article/{articleId}");
    }
    private async Task DeleteArticle(int articleId)
    {
        await articleService.DeleteArticleAsync(articleId);
        await LoadArticlesAsync();
        StateHasChanged();
    }


    //To reload articles upon deletion
    private async Task LoadArticlesAsync()
{
    articles = (await articleService.GetArticlesAsync()).AsQueryable();

    if (articles != null)
    {
        DateTime currentUtcDate = DateTime.UtcNow;

        articles = articles.Where(a => currentUtcDate >= a.StartDate && currentUtcDate < a.EndDate).AsQueryable();
    }
}

    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
}