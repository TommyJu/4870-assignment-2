@page "/"
@using BlogLibrary
@using Microsoft.AspNetCore.Components.QuickGrid
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]
@rendermode InteractiveServer

@inject ArticleApiClient articleApiClient

<link rel="stylesheet" href="style.css" asp-append-version="true" />

<div class="text-center">
    <h1 class="display-4">Welcome</h1>

    <div style="margin-top: 40px;">
        <h1>Recent Articles</h1>

        <p>
            <input type="text" @bind="searchString" @bind:event="oninput" placeholder="Search by article title"/>
        </p>

        @if (articles is null)
        {
            <p>Loading articles...</p>
        }
        else if (!articles.Any())
        {
            <p>No articles found.</p>
        }
        else
        {
            <QuickGrid Items="@filteredArticles" TGridItem="Article" class="table" Pagination="@pagination">

                <Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn>
                    <MudPaper Class="pa-4" Elevation="5">
                    <MudCard Class="border-4 mud-border-primary pa-4" Style="@($"color:{Colors.Shades.White}; background:{Colors.Shades.Black}")">

                            <MudText Typo="Typo.h3" Align="MudBlazor.Align.Center">@context.Title</MudText>
                              
                        <MudText Typo="Typo.h6" Align="MudBlazor.Align.Center">@context.Contributor!.FirstName @context.Contributor!.LastName</MudText>

                        <MudCardContent>
                            <MudText>@(context.Body != null && context.Body.Length > 100 ? context.Body.Substring(0, 100) + "..." :
                                            context.Body ?? string.Empty)</MudText>
                            @if (context.Body != null && context.Body.Length > 100)
                            {
                            <MudButton Class="red-text" Href="@($"/readmore/{context.ArticleId}")">Read more</MudButton>
                            }
                        </MudCardContent>

                        <MudCardContent>
                            <MudText Typo="Typo.body2">Start Date: @context.StartDate | End Date: @context.EndDate</MudText>
                        </MudCardContent>

                        <MudCardActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" />
                            <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default" />
                        </MudCardActions>
                    </MudCard>
                    </MudPaper>
                </Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn>
            </QuickGrid>
            <Paginator State="@pagination" />
        }
    </div>
</div>

@code {
    private IQueryable<Article>? articles;

    private string searchString = "";

    IQueryable<Article> filteredArticles
    {
        get {
            var result = articles?.Where(a => a.Title!.Contains(searchString, StringComparison.OrdinalIgnoreCase));
            return result!;
            }
    }

    protected override async Task OnInitializedAsync()
    {
        // Fetch articles using the API client
        articles = (await articleApiClient.GetArticlesAsync()).AsQueryable();

        // Filter articles by date range (only show most recent articles)
        if (articles != null)
        {
            DateTime currentUtcDate = DateTime.UtcNow;

            articles = articles.Where(a => currentUtcDate >= a.StartDate && currentUtcDate < a.EndDate).AsQueryable();
        }
    }

    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };

}
