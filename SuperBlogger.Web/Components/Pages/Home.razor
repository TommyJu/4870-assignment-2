@page "/"
@using BlogLibrary
@using Microsoft.AspNetCore.Components.QuickGrid
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject ArticleApiClient articleApiClient

<link rel="stylesheet" href="style.css" asp-append-version="true" />

<div class="text-center">
    <h1 class="display-4">Welcome</h1>

    <div style="margin-top: 40px;">
        <h1>Recent Articles</h1>

        @if (articles is null)
        {
            <p>Loading articles...</p>
        }
        else if (!articles.Any())
        {
            <p>No articles found.</p>
        }
        else
        {
            <QuickGrid Items="@articles.AsQueryable()" TGridItem="Article" class="table">
                <PropertyColumn Property="@(_ => _.Title)" />
                <PropertyColumn Property="@(_ => _.UserName)" Title="Author"/>
                <PropertyColumn Property="@(_ => _.CreateDate)" Format="d" Title="Date"/>
                <TemplateColumn Title="Content">

                        <p>
                             @(context.Body != null && context.Body.Length > 100 ? context.Body.Substring(0, 100) + "..." : context.Body ?? string.Empty)
                             @if(context.Body.Length > 100)
                             {
                                <a href="/readmore/@context.ArticleId" class="more-link">Read more</a>
                             }
                        </p>
                </TemplateColumn>
            </QuickGrid>
        }
    </div>
</div>

@code {
    private DateTime? StartDate { get; set; }
    private DateTime? EndDate { get; set; }
    private List<Article>? articles;

    protected override async Task OnInitializedAsync()
    {
        // Simulating fetching articles (replace with API call)
        articles = (await articleApiClient.GetArticlesAsync()).ToList();
    }

    private void FilterArticles()
    {
        // Simulated filtering logic (replace with API call)
        if (articles != null)
        {
            articles = articles.Where(a =>
            (!StartDate.HasValue || a.CreateDate >= StartDate.Value) &&
            (!EndDate.HasValue || a.CreateDate <= EndDate.Value)
            ).ToList();
        }
    }

}
