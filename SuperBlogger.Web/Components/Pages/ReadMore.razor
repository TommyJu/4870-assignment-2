@page "/readmore/{articleId:int}"
@using BlogLibrary
@using SuperBlogger.Web
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]
@inject ArticleApiClient articleApiClient

<link rel="stylesheet" href="style.css" asp-append-version="true" />

    @if (isLoading)
    {
        <p>Loading article...</p>
    }
    else if (Model is null)
    {
        <p class="text-danger">Article not found.</p>
    }
    else
    {
        <MudPaper Class="pa-4" Elevation="5">
            <MudCard Class="border-4 mud-border-primary pa-4" Style="@($"color:{Colors.Shades.White}; background:{Colors.Shades.Black}")">
            <h3 class="article-title">@Model.Title</h3>
            <h5 class="article-meta">@Model.Contributor!.FirstName @Model.Contributor!.LastName</h5>
            <p class="article-body">@Model.Body</p>
            <div>Start Time: @Model.StartDate | End Time: @Model.EndDate </div>
            </MudCard>
        </MudPaper>
    }

<a href="/" class="btn btn-secondary mt-3">Back to Articles</a>

@code {
    [Parameter]
    public int articleId { get; set; }

    private Article? Model { get; set; }
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Model = await articleApiClient.GetArticleByIdAsync(articleId);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching article: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
